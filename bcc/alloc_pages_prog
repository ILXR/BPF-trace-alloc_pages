#include <linux/sched.h>
#include <linux/types.h>
#include <uapi/linux/ptrace.h>
#include <linux/mm_types.h>
#include <linux/mm.h>

#ifndef TASK_COMM_LEN
#define TASK_COMM_LEN 32
#endif

#define STACK_SIZE 10240

// define output data structure in C
struct event_t
{
    u32 pid, tid;               // id
    u32 gfp_mask, pages;        // args
    u64 k_stack_id, u_stack_id; // call stack id
    u64 time;                   // timestamp
    char comm[TASK_COMM_LEN];   // command

    // u32 enter;                  // start alloc_pages
    // u64 ptr;                    // ret: struct page
};

// perf event
BPF_PERF_OUTPUT(alloc_pages_events);
// tid - event_t mapping
// BPF_HASH(id_to_event_t, u64, struct event_t);
// function call stack
BPF_STACK_TRACE(stack_traces, STACK_SIZE);

// bpf prog; attached to alloc_pages(...)
int start_alloc_pages(struct pt_regs *ctx, gfp_t gfp_mask, unsigned int order)
{
    u64 id = bpf_get_current_pid_tgid();
    u32 pid = id >> 32;
    if (FILTER)
        return 0;

    int flags = BPF_F_REUSE_STACKID;

    struct event_t data = {};
    // data.enter = 1;
    data.pid = pid;
    data.tid = id;
    data.time = bpf_ktime_get_ns();
    data.gfp_mask = gfp_mask;
    data.pages = 1 << order;
    data.k_stack_id = stack_traces.get_stackid(ctx, flags);
    data.u_stack_id = stack_traces.get_stackid(ctx, flags | BPF_F_USER_STACK);
    bpf_get_current_comm(&data.comm, sizeof(data.comm));

    // used for ret_alloc_pages
    // struct event_t *old_data = id_to_event_t.lookup(&id);
    // if (old_data)
    //     id_to_event_t.update(&id, &data);
    // else
    //     id_to_event_t.insert(&id, &data);

    alloc_pages_events.perf_submit(ctx, &data, sizeof(struct event_t));
    return 0;
}

// int ret_alloc_pages(struct pt_regs *ctx)
// {
//     u64 id = bpf_get_current_pid_tgid();
//     u32 pid = id >> 32;
//     if (FILTER)
//         return 0;

//     struct event_t *old_data = id_to_event_t.lookup(&id);

//     if (old_data && old_data->enter == 1)
//     {
//         old_data->enter = 0;
//         old_data->ptr = PT_REGS_RC(ctx);
//         id_to_event_t.update(&id, old_data);
//         alloc_pages_events.perf_submit(ctx, old_data, sizeof(struct event_t));
//     }

//     return 0;
// }